<?xml version="1.0" encoding="UTF-8"?>
<!-- 60초마다 설정 파일의 변경을 확인 하여 변경시 갱신 -->
<configuration scan="true" scanPeriod="60 seconds">
  <!-- 로그 파일이 저장될 경로 -->
  <property name="LOG_PATH" value="log"/>
  <!-- 로그 파일 이름 -->
  <property name="LOG_FILE_NAME" value="moitLog"/>
  <!-- 로그 출력 패턴 -->
  <property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] [%logger{40}] - %msg%n"/>
  <!--    <property name="CONSOLE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] [%logger{40}] - %msg%n"/>-->
  <property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] [%logger{40}] - %msg%n"/>

  <!--    환경별 property 파일 정의   -->
  <springProfile name="local">
    <property resource="application-local.properties" />
  </springProfile>
  <springProfile name="dev">
    <property resource="application-dev.properties" />
  </springProfile>
  <springProperty name="LOG_PATH" source="log.config.path"/>

  <!-- CONSOLE에 로그 출력 세팅 -->
  <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <pattern>%green([%d{yyyy-MM-dd HH:mm:ss.SSS}]) %magenta([%-5level]) %highlight([%thread]) %cyan(%logger{30}) %highlight(%msg%n)</pattern>
      <!--            <pattern>${CONSOLE_LOG_PATTERN}</pattern>-->
    </encoder>
  </appender>

  <!--    &lt;!&ndash; File에 로그 출력 세팅 &ndash;&gt;-->
  <!--    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
  <!--        &lt;!&ndash; 파일 경로 설정 &ndash;&gt;-->
  <!--        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>-->
  <!--        &lt;!&ndash; 출력패턴 설정&ndash;&gt;-->
  <!--        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
  <!--            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] [%thread] %logger %msg%n</pattern>-->
  <!--        </encoder>-->
  <!--        &lt;!&ndash; Rolling 정책 &ndash;&gt;-->
  <!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
  <!--            &lt;!&ndash; .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 &ndash;&gt;-->
  <!--            <fileNamePattern>${LOG_PATH}/%d{yyyy-MM, aux}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}.log</fileNamePattern>-->
  <!--            &lt;!&ndash; 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거&ndash;&gt;-->
  <!--            &lt;!&ndash; <maxHistory>30</maxHistory> &ndash;&gt;-->
  <!--            &lt;!&ndash; 로그 파일 최대 보관 크기. 최대 크기를 초과하면 가장 오래된 로그 자동 제거 &ndash;&gt;-->
  <!--            <totalSizeCap>20GB</totalSizeCap>-->
  <!--        </rollingPolicy>-->
  <!--    </appender>-->

  <!--    시간관련 로그인지 체크 후 저장 / 보관 30일 -->
  <appender name="TIME-CHECK" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="com.sparta.moit.global.filter.TimeCheckFilter"/>
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <pattern>${FILE_LOG_PATTERN}</pattern>
    </encoder>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${LOG_PATH}/time-check/%d{yyyy-MM-dd}_%i.log</fileNamePattern>
      <!--            <fileNamePattern>${LOG_PATH}/time-check/%d{yyyy-MM-dd_HH}_%i.log</fileNamePattern>-->
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <!-- 파일당 최대 용량 -->
        <maxFileSize>10MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!-- 일자별 로그파일 최대 30일 동안 보관-->
      <maxHistory>30</maxHistory>
    </rollingPolicy>
  </appender>
  <appender name="WARNING-FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>warn</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <pattern>${FILE_LOG_PATTERN}</pattern>
    </encoder>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${LOG_PATH}/warning/warning.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>10MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <maxHistory>30</maxHistory>
    </rollingPolicy>
  </appender>
  <appender name="ERROR-FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>error</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <pattern>${FILE_LOG_PATTERN}</pattern>
    </encoder>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${LOG_PATH}/error/error.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>10MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <maxHistory>30</maxHistory>
    </rollingPolicy>
  </appender>


  <!--    &lt;!&ndash; 로그 전역 세팅 &ndash;&gt;-->
  <!--    <root level="${LOG_LEVEL}">-->
  <!--        &lt;!&ndash; 위에 설정한 콘솔 설정 추가 &ndash;&gt;-->
  <!--        <appender-ref ref="CONSOLE"/>-->
  <!--        &lt;!&ndash; 위에 설정한 파일 설정 추가 &ndash;&gt;-->
  <!--        <appender-ref ref="FILE"/>-->
  <!--    </root>-->

  <root level="DEBUG">
    <appender-ref ref="CONSOLE"/>
    <appender-ref ref="TIME-CHECK"/>
    <appender-ref ref="WARNING-FILE"/>
    <appender-ref ref="ERROR-FILE"/>
  </root>


</configuration>